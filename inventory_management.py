# Copyright (c) 2025 sakib-maho
# Licensed under the MIT License
# See LICENSE file for details

# -*- coding: utf-8 -*-
"""Inventory Management.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bkhxlR60vso1wSYXkl2_ifBRPcKzBPdH
"""

#for somplicity i showed 10 days calculation , you can change the no by just changing the days no
import random
from statistics import mean 
#here in days no you can use 10,15,25.........
days_no = 10


initial_inventory = 3
initial_order = 8
review_period = 5
max_units = 11
initial_scheduled_arrival_day = 1


def Average(lst): 
    return mean(lst)


def demand(rand_no):
    if rand_no in range(1, 11):
        return 0
    elif rand_no in range(11, 36):
        return 1
    elif rand_no in range(36, 71):
        return 2
    elif rand_no in range(71, 92):
        return 3
    else:
        return 4


def lead_time(rand_no):
    if rand_no in range(1, 7):
        return 1
    elif rand_no in range(7, 10):
        return 2
    else:
        return 3


Days = []
Beginning_inventory = []
Random_digit_for_demand = []
Demand = []
Ending_inventory = []
Shortage_quantity = []
Order_quantity = []
Random_digit_for_lead_time = []
Days_until_order_arrive = []

flag = 0
orderUpdate = 0
orderno = initial_order

shortage = 0

xx = 0
x = 0
for i in range(0, days_no):
    Days.append(i+1)
    if i == 4:
        #x = x + 5
        pass
    if i == 0:
        Beginning_inventory.append(initial_inventory)
        Random_digit_for_demand.append(random.randint(1, 100))
        Demand.append(demand(Random_digit_for_demand[i]))
        temp = Beginning_inventory[i] - Demand[i]
        if temp >= 1:
            Ending_inventory.append(temp)
            Shortage_quantity.append(0)
        else:
            Ending_inventory.append(0)
            Shortage_quantity.append(-1*temp)
            shortage += Shortage_quantity[0]
        Order_quantity.append("-")
        Random_digit_for_lead_time.append("-")
        Days_until_order_arrive.append(initial_scheduled_arrival_day)
    else:
        initial_scheduled_arrival_day -= 1
        if initial_scheduled_arrival_day >= 0:
            Beginning_inventory.append(Ending_inventory[len(Ending_inventory)-1])
            if i != 4 and i != 9 and i != 14 and i != 19 and i != 24:
                Days_until_order_arrive.append(initial_scheduled_arrival_day)
        else:
            if initial_scheduled_arrival_day == -1:
                Beginning_inventory.append(Ending_inventory[len(Ending_inventory)-1]+initial_order)
                xx = sum(Shortage_quantity)
                if i != 4 and i != 9 and i != 14 and i != 19 and i != 24:
                    Days_until_order_arrive.append("-")
            if initial_scheduled_arrival_day < -1:
                Beginning_inventory.append(Ending_inventory[len(Ending_inventory)-1])
                if i != 4 and i != 9 and i != 14 and i != 19 and i != 24:
                    Days_until_order_arrive.append("-")
        Random_digit_for_demand.append(random.randint(1, 100))
        Demand.append(demand(Random_digit_for_demand[i]))
        temp = Beginning_inventory[i] - (Demand[i]+xx)
        xx = 0
        if temp >= 1:
            Ending_inventory.append(temp)
            Shortage_quantity.append(0)
        else:
            Ending_inventory.append(0)
            flag = -1 * temp
            if temp == 0:
                Shortage_quantity.append(0)
                shortage = 0
            else:
                shortage += flag
                Shortage_quantity.append(shortage)

        if i != 4 and i != 9 and i != 14 and i != 19 and i != 24:
            Order_quantity.append("-")
            Random_digit_for_lead_time.append("-")
        else:
            #print("=================================")
            Random_digit_for_lead_time.append(random.randint(0, 9))
            Days_until_order_arrive.append(lead_time(Random_digit_for_lead_time[i]))
            initial_scheduled_arrival_day = Days_until_order_arrive[i]
            orderno = max_units - Ending_inventory[i]
            initial_order = orderno
            Order_quantity.append(orderno)



print(f"Days: {Days}")
print(f"Beginning_inventory: {Beginning_inventory}")
print(f"Random_digit_for_demand: {Random_digit_for_demand}")
print(f"Demand: {Demand}")
print(f"Ending_inventory: {Ending_inventory}")
print(f"Shortage_quantity: {Shortage_quantity}")
print(f"Order_quantity: {Order_quantity}")
print(f"Random_digit_for_lead_time: {Random_digit_for_lead_time}")
print(f"Days_until_order_arrive: {Days_until_order_arrive}")
average = Average(Demand)
print(f"Average Demand: {round(average, 2)}")
average = Average(Shortage_quantity)
print(f"Average Shortage_quantity: {round(average, 2)}")

#Table 
import plotly.graph_objects as go
#print(f"Validation Accuracy {validation_accuracy}")
fig = go.Figure(data=[go.Table(
    header=dict(values=['Days', 'Beginning inventory', 'Random digit for demand', 'Demand', 'Ending inventory', 'Shortage quantity', 'Order quantity', 'Random digit for lead time', 'Days until order arrive'],
                line_color='darkslategray',
                fill_color='lightskyblue'),
    cells=dict(values=[Days,
                       Beginning_inventory, Random_digit_for_demand, Demand, Ending_inventory, Shortage_quantity, Order_quantity, Random_digit_for_lead_time, Days_until_order_arrive],
               line_color='darkslategray',
               fill_color='lightcyan'))
])

fig.update_layout(width=1200, height=450)
fig.show()